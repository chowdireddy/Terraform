Programing to automae the infra now a days
we can do with the sell script as well but its very complex and can't reusable
large shell script converted in terraform simple and readable 

Types of iac tools
-----------------
1>Configuration management(ansible, puppet, chef, saltsstack)
2>Server template (docker, packer, vegrant)
3>Provisoning tools: (terraform, Cloud formation)

Terraform: 
deploy immutable infra resource
servers, db, network ..etc
Multiple providers for all major cloud

Why is terrafomr?
Free and open source by hashicorp
single binary easy to install and use in minutes
Multiple platform on both public and private (physical machine, vmware, aws, gcp, Azure) this can be arcive by providers
providers help to manage third party tools with api

uses hcl : hashicorp configuration language
all fils ends with tf
declaritive : infra is as per the code


3 phases: init/plan/apply
init: intialise the project and identofy and download the neccesary providers
plan: draft a planto get to the target state
apply: make changes to bring the desired state

*if ay thing is missed will create only that object

Resource:
every object that terraform manages eg: db, ec2, db, network on physical server as well
manages life cycle provisining -- configuring -- decommisioning
record the state of the infra  based on this it will react for applying new changes
ensure that infra is in desired state , state file is the blue print

**Terraform can read the attributes of the existin infrastructure by using the data sources****
**can import other reources created manually or by other tools into that control and mange them going forward



Installing Terraform:
------------------
can download from terraform.io
mv terrafrom /usr/local/bin
>>>>>>>>>>terraform version

HCL files to update the configuraton files with tf extention

Resource : object terraform manages it could be afile,machine, data base, users... etc


Terraformplanout put:
+ to create new
- to destroy the resources
-/+ : recreteing the file

Terraform is immutable:eg if we crete a local file and after that we need to chagent h permiison again then tf willl delete that and recreate the new

How to update and destroy the resource??

terraform apply >> to make or update the changes
terraform destroy >> to remove all the things from terraform



iac-server $ terraform init
Terraform initialized in an empty directory!

The directory has no Terraform configuration files. You may begin working
with Terraform immediately by creating Terraform configuration files.
iac-server $ pwd
/root
iac-server $ cd terraform-projects/HCL/
iac-server $ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/local...
- Installing hashicorp/local v2.1.0...
- Installed hashicorp/local v2.1.0 (self-signed, key ID 34365D9472D7468F)

Partner and community providers are signed by their developers.
If you'd like to know more about provider signing, you can read about it here:
https://www.terraform.io/docs/plugins/signing.html

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, we recommend adding version constraints in a required_providers block
in your configuration, with the constraint strings suggested below.

* hashicorp/local: version = "~> 2.1.0"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
iac-server $ 




iac-server $ terraform plan

Error: Missing required argument rectyfing

  on main.tf line 1, in resource "local_file" "games":
   1: resource "local_file" "games" {

The argument "filename" is required, but no definition was found.


Error: Unsupported argument

  on main.tf line 2, in resource "local_file" "games":
   2:   file     = "/root/favorite-games"

An argument named "file" is not expected here.

iac-server $ 



iac-server $ terraform plan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # local_file.games will be created
  + resource "local_file" "games" {
      + content              = "FIFA 21"
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "/root/favorite-games"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

iac-server $ 




iac-server $ terraform apply

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # local_file.games will be created
  + resource "local_file" "games" {
      + content              = "FIFA 21"
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "/root/favorite-games"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: es

Apply cancelled.
iac-server $ 
iac-server $ 
iac-server $ 
iac-server $ 
iac-server $ 
iac-server $ 
iac-server $ 
iac-server $ 
iac-server $ 
iac-server $ 
iac-server $ terraform apply

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # local_file.games will be created
  + resource "local_file" "games" {
      + content              = "FIFA 21"
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "/root/favorite-games"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

local_file.games: Creating...
local_file.games: Creation complete after 0s [id=f68b901eb16aff12e9458bdb656a7df8d3425d4c]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
iac-server $ 



iac-server $ terraform plan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

local_file.games: Refreshing state... [id=f68b901eb16aff12e9458bdb656a7df8d3425d4c]

------------------------------------------------------------------------

No changes. Infrastructure is up-to-date.

This means that Terraform did not detect any differences between your
configuration and real physical resources that exist. As a result, no
actions need to be performed.
iac-server $ 


sensitive content in terraform ???
iac-server $ terraform plan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

local_file.games: Refreshing state... [id=f68b901eb16aff12e9458bdb656a7df8d3425d4c]

------------------------------------------------------------------------

No changes. Infrastructure is up-to-date.

This means that Terraform did not detect any differences between your
configuration and real physical resources that exist. As a result, no
actions need to be performed.
iac-server $ 



iac-server $ terraform apply
local_file.games: Refreshing state... [id=f68b901eb16aff12e9458bdb656a7df8d3425d4c]

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # local_file.games must be replaced
-/+ resource "local_file" "games" {
      - content              = "FIFA 21" -> null # forces replacement
        directory_permission = "0777"
        file_permission      = "0777"
        filename             = "/root/favorite-games"
      ~ id                   = "f68b901eb16aff12e9458bdb656a7df8d3425d4c" -> (known after apply)
      + sensitive_content    = (sensitive value)
    }

Plan: 1 to add, 0 to change, 1 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

local_file.games: Destroying... [id=f68b901eb16aff12e9458bdb656a7df8d3425d4c]
local_file.games: Destruction complete after 0s
local_file.games: Creating...
local_file.games: Creation complete after 0s [id=f68b901eb16aff12e9458bdb656a7df8d3425d4c]

Apply complete! Resources: 1 added, 0 changed, 1 destroyed.
iac-server $ 



****If any mistake in tf files terraform destroy also won't work***




iac-server $ terraform apply
local_file.games: Refreshing state... [id=f68b901eb16aff12e9458bdb656a7df8d3425d4c]

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # local_file.games must be replaced
-/+ resource "local_file" "games" {
      - content              = "FIFA 21" -> null # forces replacement
        directory_permission = "0777"
        file_permission      = "0777"
        filename             = "/root/favorite-games"
      ~ id                   = "f68b901eb16aff12e9458bdb656a7df8d3425d4c" -> (known after apply)
      + sensitive_content    = (sensitive value)
    }

Plan: 1 to add, 0 to change, 1 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

local_file.games: Destroying... [id=f68b901eb16aff12e9458bdb656a7df8d3425d4c]
local_file.games: Destruction complete after 0s
local_file.games: Creating...
local_file.games: Creation complete after 0s [id=f68b901eb16aff12e9458bdb656a7df8d3425d4c]

Apply complete! Resources: 1 added, 0 changed, 1 destroyed.
iac-server $ 




Providers:
---------------------------------------------------
Providers used to support third party platforms with the helpof plugins
aws,azure, gcp
plugin based architechure 
plugins are publicly available at terraform registry called
registry.terraform.io

3 tiers of providers:
--------------------
1> Official: aws, gcp, local.. etc
2> Verified: bigip(f5), heroku, digitl ocean 
  third party technologies partnerd with hashicorp
3> Community provider: developed and mainained by hashi corp community (AD,ucloud,netapp-gcp)


terraform init wildispaly te plugin version 
we can run n time this command not effect the code

plugins stored in .terraform/plugins contain configuration files

while terrafomr init output

* registry.terraform.io/hashicorp/local     hostname/organizatinal name space/typ of provider

  


